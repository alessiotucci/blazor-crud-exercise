@page "/Skill"
@inject HttpClient Http

@using MonusProject.Client.Shared.Models

<h3>Skill</h3>

<div class="card" hidden="@HideLabel">
    <p>Do you want to delete this item?</p>
    <button class="btn-outline-danger" @onclick="YesPlease">OK</button>
    <button class="btn-danger" @onclick="DontDelete">No</button>
</div>

@if (skills == null)
{
    <p><em>Loading...</em></p>

}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Skill Name </th>
                <th>candidati</th>
                <th>dipendeti </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cand in skills)
            {
                <tr>
                    <td>@cand.SkillName</td>
                    @if (cand.CandidatiSkillati != null && cand.CandidatiSkillati.Any())
                    {
                      
                            @foreach (var candidato in cand.CandidatiSkillati)
                            {
                                <td>@candidato.Nome</td>
                            }
                        
                    }

                        @if (cand.DipendentiSkillati.FirstOrDefault() != null)
                        {
                        <td>
                            @cand.DipendentiSkillati.FirstOrDefault().Cognome;
                        </td>
                        }
                    <td>
                        <button class="btn-danger" @onclick="() => Delete(cand.SkillId)">delete </button>


                    </td>
                    <td>
                        <input type="text" placeholder=" Aggiorna Skill" @bind="valAggiornato" />
                        <button class="btn-info" @onclick="() => Edit(cand.SkillId)"> Edit </button>
                    </td>
                </tr>

            }
        </tbody>
    </table>
}

<div class="card">
    <h4> Insererisci una nuova skill</h4>
    <form>
        <input type="text"  placeholder="Skill" @bind="valSkill" />
        <br />
        <button class="btn-primary" @onclick="Add">  submit </button>
    </form>
</div>



<style>

    .card {
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 20px;
        width: 300px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        background-color: #f8f8f8;
        text-align: center;
    }

        .card input[type="number"],
        .card input[type="text"],
        .card input[type="datetime"] {
            width: 100%;
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
            outline: none;
            transition: border-color 0.3s ease-in-out;
        }

            .card input[type="number"]:focus,
            .card input[type="text"]:focus,
            .card input[type="datetime"]:focus {
                border-color: #007bff;
            }
</style>

@code {
    public Skill[]? skills;
    public string? valSkill;

    public string? valAggiornato;

    public Skill UpdatedSkill = new Skill();
    public Skill NuovaSkill = new Skill();

    // poppup nice
    public bool HideLabel = true;
    public int Confirmation = 0;

    protected override async Task OnInitializedAsync()
    {
        skills = await Http.GetFromJsonAsync<Skill[]>("api/Skill");
    }

    public async Task Add()
    {
        NuovaSkill.SkillName = valSkill;
        NuovaSkill.CandidatiSkillati = null;
        NuovaSkill.CandidatiSkillati = null;
        await AddSkill(NuovaSkill);
    }

    public async Task AddSkill(Skill nuovaskill)
    {
        var response = await Http.PostAsJsonAsync("api/Skill", nuovaskill);
        if (response.IsSuccessStatusCode)
        {
            HideLabel = false;
            Console.WriteLine("success");
        }
        else
        {
            Console.WriteLine("failed");
        }

    }


    public async Task Delete(int id)
    {
        HideLabel = false;


        var response = await Http.DeleteAsync($"api/Skill/{id}");

        if (response.IsSuccessStatusCode)
        {
            // History item was successfully deleted, update the list
            skills = await Http.GetFromJsonAsync<Skill[]>("api/Skill");
        }
        else
        {
            skills = null;
            // Handle the case where deletion was not successful
            // You can show an error message or take appropriate action
        }


    }


    public async Task Edit(int id)
    {
        UpdatedSkill.SkillName = valAggiornato;

        var response = await Http.PutAsJsonAsync($"api/Skill/{id}", UpdatedSkill);
        if (response.IsSuccessStatusCode)
            skills = await Http.GetFromJsonAsync<Skill[]>("api/Skill");
        //else
       // skills = await Http.GetFromJsonAsync<Skill[]>("api/Skill");


    }
    public   async Task DontDelete()
    {
        HideLabel = true;
        Confirmation = 2;
    }

    public  async Task YesPlease()
    {
        Confirmation = 1;
        HideLabel = true;
        
    }
}
