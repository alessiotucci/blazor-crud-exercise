@page "/tabelladipendenti"
@inject HttpClient Http
@using MonusProject.Client.Shared.Models;

<PageTitle>Tabella Dipendenti</PageTitle>

<h3>Tabella Dipendenti</h3>

@if(Dipendenti == null)
{
    <p><em>Loading...</em></p>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">First</th>
            <th scope="col">Last</th>
            <th scope="col">Handle</th>
        </tr>
    </thead>
    <tbody>
         @foreach (var dipendente in Dipendenti)
         {
        <tr>
            <td>@dipendente.Nome</td>
            <td>@dipendente.Cognome</td>
            <td>@dipendente.SkillName</td>
                    <td><button type="button" @onclick = "()=> Delete(dipendente.DipendenteId)"class="btn btn-danger">Delete</button></td>
        </tr>
         }
    </tbody>
</table>
}

<div class="card" style="width: 18rem;">
    <div class="card-body">
        <form>
            <div class="mb-3">
                <label for="exampleInputEmail1" class="form-label">Nome</label>
                <input type="text" class="form-control" required @bind=NomeValore>
            </div>
            <div class="mb-3">
                <label for="exampleInputPassword1" class="form-label">Cognome</label>
                <input type="text" class="form-control" @bind=CognomeValore>
            </div>
            <div class="mb-3">
                <label for="exampleInputPassword1" class="form-label">SkillName</label>
                <input type="text" class="form-control" @bind=SkillName>
            </div>
            <button type="submit" @onclick="Test" class="btn btn-primary">Submit</button>
        </form>
    </div>
</div>

@code {
    public Dipendente[]? Dipendenti;
    public string NomeValore;
    public string CognomeValore;
    public string SkillName;
    protected override async Task OnInitializedAsync()
    {
        Dipendenti = await Http.GetFromJsonAsync<Dipendente[]>("api/Dipendente");
    }
    public void Test()
    {

        return;
    }

    private async Task GetAllDipendenti()
    {
        var result = await Http.GetAsync("api/Dipendente");
    }

    public async Task Delete(int id)
    {
        var response = await Http.DeleteAsync($"api/Dipendente/{id}");

        if (response.IsSuccessStatusCode)
        {
            // Dipendente item is succesfully deleted, update the list
            Dipendenti = await Http.GetFromJsonAsync<Dipendente[]>("api/Dipendente");
        }
        else
        {
            Dipendenti = null;
        }
    }
}
