@page "/tabelladipendenti"
@inject HttpClient Http
@using MonusProject.Client.Shared.Models;

<PageTitle>Tabella Dipendenti</PageTitle>

<h3>Tabella Dipendenti</h3>

@if(Dipendenti == null)
{
    <p><em>Loading...</em></p>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th scope="col">Nome</th>
            <th scope="col">Cognome</th>
            <th scope="col">Skill</th>
            <th scope="col">Delete</th>
            <th scope="col">Edit</th>
        </tr>
    </thead>
    <tbody>
         @foreach (var dipendente in Dipendenti)
         {
        <tr>
            <td>@dipendente.Nome</td>
            <td>@dipendente.Cognome</td>
            @*<td>@dipendente.SkillName</td>*@
            <td><button type="button" @onclick = "()=> Delete(dipendente.DipendenteId)"class="btn btn-danger">Delete</button></td>
            <td><button type="button" @onclick="() => EditButton(dipendente)" class="btn btn-danger">Edit</button></td>
        </tr>
         }
    </tbody>
</table>
}

<div class="divAggiunta card mt-5" style="width: 18rem;">
    <div class="card-body">
        <h2 class="text-center">Aggiungi</h2>
        <form>
            <div class="mb-3">
                <label for="exampleInputEmail1" class="form-label">Nome</label>
                <input type="text" class="form-control" required @bind=NomeValore>
            </div>
            <div class="mb-3">
                <label for="exampleInputPassword1" class="form-label">Cognome</label>
                <input type="text" class="form-control" @bind=CognomeValore>
            </div>
            <div class="mb-3">
                <label for="exampleInputPassword1" class="form-label">SkillName</label>
                <input type="text" class="form-control" @bind=SkillName>
            </div>
            <button type="button+" @onclick="Aggiungi" class="btn btn-primary">Submit</button>
        </form>
    </div>
</div>
@if (isEdit)
{
    <div class="divModifica card mt-5" style="width: 18rem;">
        <div class="card-body">
            <h2 class="text-center">Modifica</h2>
            <form>
                <div class="mb-3">
                    <label for="exampleInputEmail1" class="form-label">Nome</label>
                    <input type="text" class="form-control" required @bind=Modificato.Nome>
                </div>
                <div class="mb-3">
                    <label for="exampleInputPassword1" class="form-label">Cognome</label>
                    <input type="text" class="form-control" required @bind=Modificato.Cognome>
                </div>
                <div class="mb-3">
                    <label for="exampleInputPassword1" class="form-label">SkillName</label>
                    <input type="text" class="form-control" required @*@bind=Modificato.SkillName*@>
                </div>
                <button type="button" @onclick="UpdateDipendente" class="btn btn-primary">Submit</button>
                <button type="button" @*@onclick="" *@ class="btn btn-danger">Annulla</button>
            </form>
        </div>
    </div>
}

@code {
    public Dipendente[]? Dipendenti;
    Dipendente Aggiunto = new Dipendente();
    Dipendente Modificato = new Dipendente();
    bool isEdit = false;
    
    public string NomeValore;
    public string CognomeValore;
    public string SkillName;
    protected override async Task OnInitializedAsync()
    {
        Dipendenti = await Http.GetFromJsonAsync<Dipendente[]>("api/Dipendente");
    }

    private async Task GetAllDipendenti()
    {
        var result = await Http.GetAsync("api/Dipendente");
    }

    public async Task Delete(int id)
    {
        var response = await Http.DeleteAsync($"api/Dipendente/{id}");

        if (response.IsSuccessStatusCode)
        {
            // Dipendente item is succesfully deleted, update the list
            Dipendenti = await Http.GetFromJsonAsync<Dipendente[]>("api/Dipendente");
        }
        else
        {
            Dipendenti = null;
        }
    }

    public async Task GetbyId(int id)
    {
        await Http.GetFromJsonAsync<Dipendente>($"api/Dipendente/{id}");
    }

    public async Task Aggiungi()
    {
        Aggiunto.Nome = NomeValore;
        Aggiunto.Cognome = CognomeValore;
        //Aggiunto.SkillName = SkillName;

        await AddDipendente(Aggiunto);
        Dipendenti = await Http.GetFromJsonAsync<Dipendente[]>("api/Dipendente");
    }

    public async Task AddDipendente(Dipendente nuovoDipendente)
    {
        await Http.PostAsJsonAsync("api/Dipendente", nuovoDipendente);
    }

    public async Task Put()
    {
        Modificato.Nome = NomeValore;
        Modificato.Cognome = CognomeValore;
        //Modificato.SkillName = SkillName;

        //await UpdateDipendente(Modificato);
        var response = await Http.PutAsJsonAsync($"api/Dipendente/", Modificato);
        Dipendenti = await Http.GetFromJsonAsync<Dipendente[]>("api/Dipendente");
    }

    public async Task UpdateDipendente()
    {
        var response = await Http.PostAsJsonAsync($"api/Dipendente/UpdateDipendente/{Modificato.DipendenteId}", Modificato);
        Dipendenti = await Http.GetFromJsonAsync<Dipendente[]>("api/Dipendente");
    }

    protected virtual void EditButton(Dipendente dipendente)
    {
        isEdit = true;
        Modificato = dipendente;

        //Click += new EventHandler();
    }
}
