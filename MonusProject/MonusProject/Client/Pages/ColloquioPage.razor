@inject HttpClient Http
@inject IJSRuntime js
@page "/Colloquio"
@using MonusProject.Client.Helper
@using MonusProject.Client.Shared.Models
@using System.Threading;


@if (colloqui != null)
{
    <h3>Colloquio</h3>
}
else{
    <h4> something is wrong, colloqui is null</h4>
}

<div class="card" hidden="@HideLabel">
    <p>Do you want to delete this item?</p>
    <button class="btn-outline-danger" @onclick="YesPlease">OK</button>
    <button class="btn-danger" @onclick="DontDelete">No</button>
</div>

@if (colloqui == null)
{
    <p><em>Loading...</em></p>

}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>orario del colloquio </th>
                <th>dipendenteid</th>
                <th>candidatoid</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cand in colloqui)
            {
                <tr>
                    <td>@cand.RaiseTimeUTC</td>
                    <td>@cand.DipendenteId</td>
                    <td>@cand.CandidatoId</td>
                    <td>
                        <button class="btn-danger" @onclick="() => Delete(cand.ColloquioId)">delete </button>
                    </td>
                    
                    <td>
                        <button class="btn-dark" @onclick="() => PassId(cand.ColloquioId)"> edit  </button>

                    </td>
                </tr>

            }
        </tbody>
    </table>
}

<div class="card">
    <h2> nuovo colloquio</h2>
    <form>
        <input type="datetime-local" placeholder="Orario del Colloquio" @bind="valueTime" />
        <br />
        <label for=" Candidato ">Candidato:</label>
        @if (candidati == null)
        {
            <h2>Database Vuoto </h2>



        }
        else
        {
            <select @bind="candidatoid">
                @foreach (var candidato in candidati)
                {


                    <option value="@candidato.CandidatoId"> @candidato.Nome</option>
                }

            </select>

        }
        <br />
        <label for=" Referente Tecnico ">Referente Tecnico:</label>
        @if (dipendenti == null)
        {
            <h3>Database Vuoto</h3>
        }
        else
        {
            <select @bind="dipendenteid">
                @foreach (var dipendente in dipendenti)
                {
                    <option value="@dipendente.DipendenteId">@dipendente.Nome </option>
                }
            </select>
        }
        <button class="btn-primary" @onclick="Add">  submit </button>

    </form>
</div>



<div class="card" hidden="@hidecard">
    <h2>aggiorna colloquio esistente</h2>
    <form>
        <input type="datetime-local" placeholder="aggiorna orario del Colloquio" @bind="UpdatedTime" />
        <br />
        <label for=" Candidato ">Candidato:</label>
        @if (candidati == null)
        {
            <h2>aggiornamento in corso </h2>



        }
        else
        {
            <select @bind="UPdatedCanId">
                @foreach (var candidato in candidati)
                {


                    <option value="@candidato.CandidatoId"> @candidato.Nome</option>
                }

            </select>

        }
        <br />
        <label for=" Referente Tecnico ">Referente Tecnico:</label>
        @if (dipendenti == null)
        {
            <h3>aggiornamento in corso</h3>
        }
        else
        {
            <select @bind="UpdatedDipId">
                @foreach (var dipendente in dipendenti)
                {
                    <option value="@dipendente.DipendenteId">@dipendente.Nome </option>
                }
            </select>
        }
        <button class="btn-primary" @onclick="Edit"> aggiorna </button>

    </form>
</div>


<style>

    .card {
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 20px;
        width: 300px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        background-color: #f8f8f8;
        text-align: center;
    }

        .card input[type="number"],
        .card input[type="text"],
        .card input[type="datetime"] {
            width: 100%;
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
            outline: none;
            transition: border-color 0.3s ease-in-out;
        }

            .card input[type="number"]:focus,
            .card input[type="text"]:focus,
            .card input[type="datetime"]:focus {
                border-color: #007bff;
            }
</style>

@code {
    public Colloquio[]? colloqui;
    public Candidato[]? candidati;
    public Dipendente[]? dipendenti;
    public DateTime valueTime;
    public string value1;
    public int dipendenteid;
    public int candidatoid;
    public string value2;
    public Colloquio NuovoColloquio = new Colloquio();


    public bool HideLabel = true;
    public int Confirmation = 0;

    // edit button is nice
    public bool hidecard = true;
    public int bogus_id = 0;

    // update setting
    public DateTime UpdatedTime;
    public int UpdatedDipId;
    public int UPdatedCanId;
    public Colloquio UpdatedColloquio = new Colloquio();


    public void PassId(int id)
    {
        bogus_id = id;
        hidecard = false;
    }
    public async Task Edit()
    {
        UpdatedColloquio.RaiseTimeUTC = UpdatedTime;
        UpdatedColloquio.DipendenteId = UpdatedDipId;
        UpdatedColloquio.CandidatoId = UPdatedCanId;
        var response = await Http.PutAsJsonAsync($"api/Colloquio/{bogus_id}", UpdatedColloquio);
        if (response.IsSuccessStatusCode)
            colloqui = await Http.GetFromJsonAsync<Colloquio[]>("api/Colloquio");

        hidecard = true;

    }


    protected override async Task OnInitializedAsync()
    {
        colloqui = await Http.GetFromJsonAsync<Colloquio[]>("api/Colloquio");
        candidati = await Http.GetFromJsonAsync<Candidato[]>("api/Candidato");
        dipendenti = await Http.GetFromJsonAsync<Dipendente[]>("api/Dipendente");
    }
    public async Task Add()
    {
        NuovoColloquio.RaiseTimeUTC = valueTime;
        NuovoColloquio.DipendenteId = dipendenteid;
        NuovoColloquio.CandidatoId = candidatoid;
        await AddColloquio(NuovoColloquio);
    }

    public async Task AddColloquio(Colloquio nuovocolloquio)
    {
        var response = await Http.PostAsJsonAsync("api/Colloquio", nuovocolloquio);
        Console.WriteLine("adding the colloquio");


    }

    public  void DontDelete()
    {
        HideLabel = true;
        Confirmation = 2;
        return;
    }

    public  void YesPlease()
    {
        Confirmation = 1;
        HideLabel = true;

        return;
    }

    public async Task Delete(int id)
    {
        HideLabel = false;
        
        
        Thread.Sleep(500);
        
        if (Confirmation == 1)
        {
            var response = await Http.DeleteAsync($"api/Colloquio/{id}");

            HideLabel = true;

            if (response.IsSuccessStatusCode)
            {
                // History item was successfully deleted, update the list
                colloqui = await Http.GetFromJsonAsync<Colloquio[]>("api/Colloquio");
            }
            else
            {
                colloqui = null;
                // Handle the case where deletion was not successful
                // You can show an error message or take appropriate action
            }
        }
        colloqui = await Http.GetFromJsonAsync<Colloquio[]>("api/Colloquio");


    }

}
