@inject HttpClient Http
@inject IJSRuntime js
@page "/Colloquio"
@using MonusProject.Client.Helper
@using MonusProject.Client.Shared.Models

<h3>Colloquio</h3>


@if (colloqui == null)
{
    <p><em>Loading...</em></p>
    
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>orario del colloquio </th>
                <th>Referente Tecnico </th>
                <th>Candidato </th>
                <th>extra </th>


            </tr>
        </thead>
        <tbody>
            @foreach (var cand in colloqui)
            {
                <tr>
                    <td>@cand.RaiseTimeUTC</td>
                   <td> <button type="button" class="btn btn-outline-warning">@cand.DipendenteId</button>
                    </td>
                    <td><button @onclick="() =>ShowCandidato(cand.CandidatoId)" type="button" class="btn btn-outline-warning">@cand.CandidatoId</button>
                    </td>
                    <td> extra</td>

                    <button class="btn-danger" @onclick="() => Delete(cand.ColloquioId)">delete </button>

                </tr>
                
            }
        </tbody>
    </table>
}

<div class="card">
    <form>
        <input type="datetime-local" placeholder="Orario del Colloquio" @bind="valueTime" />
        <br />

        <label for="candidato">Scegli un Candidato</label>
        <br />
        @if (potenzialiCandidati != null)
        {
            <select @bind="CanId">
                @foreach (var x in potenzialiCandidati)
                {
                    <option value="@x.CandidatoId">@x.Nome @x.Cognome </option>
                }
            </select>
        }
        else
        {
            <h3> database is loading</h3>
        }
        <br />

        <label for="dipendente">Scegli un Referente Tecnico</label>
        <br />
        @if (referentiTecnici != null)
        {
            <select @bind="DipId">
            @foreach (var x in referentiTecnici)
            {
                <option value="@x.DipendenteId">@x.Nome @x.Cognome</option>
            }
            </select>
        }
        else
        {
            <h3> database is loading</h3>
        }
        <br />
        <button class="btn-primary" @onclick="Add">  submit alright </button>
    </form>
</div>


<div style="display: flex;">


@if (test != null)
{

    <div class="card" >
        <h2>Candidato Details </h2>
        <p>@test.Nome </p>
        <p>@test.Cognome</p>
        <p> Skill: @test.SkillName</p>


    </div>
}

<div class="card">
    <h2> Referente Details</h2>
    <p>Name: </p>
    <p>Cognome:</p>
    <p> Skill</p>


</div>
</div>
<card>
<div class="popup-content" hidden="@HideLabel">
    <div id="popup">
            <p style="color: white; font-size: 24px;">Are you sure to delete this?</p>
            <button class="btn-outline-primary" @onclick="@Toggle"> yes </button>
    </div>
    
</div>  
</card>

<style>
    #popup {
        position: fixed;
           top: 20%;
        left: 30%;
        right: 30%;
        bottom: 20%;
        
        width: 530px;
        height:230px;
        background-color: red; /* Change to your desired primary red color */
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

        #popup p {
            color: white; /* Text color inside the popup */
        }
</style>


<button class="btn-outline-primary" @onclick="@Toggle">Show/Hide</button>









<style>

    .card {
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 20px;
        width: 300px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        background-color: #f8f8f8;
        text-align: center;
    }

        .card input[type="number"],
        .card input[type="text"],
        .card input[type="datetime"] {
            width: 100%;
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
            outline: none;
            transition: border-color 0.3s ease-in-out;
        }

            .card input[type="number"]:focus,
            .card input[type="text"]:focus,
            .card input[type="datetime"]:focus {
                border-color: #007bff;
            }
</style>

@code {
    private bool HideLabel { get; set; } = true;
    private void Toggle()
    {
        HideLabel = !HideLabel;
    }
    public Colloquio[]? colloqui;
    public Candidato[]? potenzialiCandidati;
    public Dipendente[]? referentiTecnici;
    public DateTime valueTime;
    public string value1;

    public string value2;
    public int DipId;
    public int CanId;

    public Candidato test;
    public Dipendente test2;
    // Single object
    public Colloquio NuovoColloquio = new Colloquio();

    protected override async Task OnInitializedAsync()
    {
        colloqui = await Http.GetFromJsonAsync<Colloquio[]>("api/Colloquio");
        potenzialiCandidati = await Http.GetFromJsonAsync<Candidato[]>("api/Candidato");
        referentiTecnici = await Http.GetFromJsonAsync<Dipendente[]>("api/Dipendente");

    }
    public async Task ShowCandidato(int id)
    {
        GetById(id);   
    }
    public async Task Add()
    {
        NuovoColloquio.RaiseTimeUTC = valueTime;
        NuovoColloquio.DipendenteId = DipId;
        NuovoColloquio.CandidatoId = CanId;
        AddColloquio(NuovoColloquio);
    }

    public async Task GetById(int id)
    {
        test = await Http.GetFromJsonAsync<Candidato>($"api/Candidato/{id}");
    }

    public async Task AddColloquio(Colloquio nuovocolloquio)
    {
        var response = await Http.PostAsJsonAsync("api/Colloquio", nuovocolloquio);

    }

    
   


    public ValueTask<bool> DeletePopUp()
    {
        return js.Confirm("are you sure to delete this stuff?");
    }

    public async Task Delete(int id)
    {
       // HideLabel = !HideLabel;

        bool confirmation = await DeletePopUp();
        if (confirmation)
        {
            var response = await Http.DeleteAsync($"api/Colloquio/{id}");

            if (response.IsSuccessStatusCode)
            {
                // History item was successfully deleted, update the list
                colloqui = await Http.GetFromJsonAsync<Colloquio[]>("api/Colloquio");
            }
            else
            {
                colloqui = null;
                // Handle the case where deletion was not successful
                // You can show an error message or take appropriate action
            }
        }

    }

}
