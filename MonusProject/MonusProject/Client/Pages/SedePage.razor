@page "/Sede"
@inject HttpClient Http

@using MonusProject.Client.Shared.Models


<h3>Sede</h3>

<div class="card" hidden="@HideLabel">
    <p>Do you want to delete this item?</p>
    <button class="btn-outline-danger" @onclick="YesPlease">OK</button>
    <button class="btn-danger" @onclick="DontDelete">No</button>
</div>

@if (Sedi  == null)
{
    <p><em>Loading...</em></p>

}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome Sede </th>
                <th>Indirizzo </th>
                <th>pulsante</th>
                <th>pulsante</th>
                
            </tr>
        </thead>
        <tbody>
            @foreach (var cand in Sedi)
            {
                <tr>
                    <td>@cand.SedeName</td>
                    <td>@cand.Indirizzo</td>
                   <td> <button class="btn-danger" @onclick="() => Delete(cand.SedeId)">delete </button> </td>
                   <td>
                    <button class="btn-dark" @onclick="() => EditThis(cand.SedeId)"> update this </button>
                    </td>
                </tr>

            }
        </tbody>
    </table>
}

<div class="card">
    <h3> Inserisci una nuova sede!</h3>
    <form>
        <input type="text" placeholder="Nome della Sede" @bind="valNomeSede" />
        <br />
        <input type="text" placeholder="Indirizzo della Sede" @bind="valSedeIndirizz" />
        <br />

        <button class="btn-primary" @onclick="Add">  submit </button>
    </form>
</div>

<div class="card" hidden="@flag_da_provare" >
    <h3>Aggiorna La Sede</h3>
    <form>
        <input type="text" placeholder="nuovo nome" @bind="upNomeSede" />
        <br />
        <input type="text" placeholder="nuovo indirizzo" @bind="upSedeIndiriz" />
        <br />

        <button class="btn-outline-dark" @onclick="Edit">  aggiorna</button>
        <button class="btn-secondary" > nascondi</button>
    </form>
</div>

<style>

    .card {
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 20px;
        width: 300px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        background-color: #f8f8f8;
        text-align: center;
    }

        .card input[type="number"],
        .card input[type="text"],
        .card input[type="datetime"] {
            width: 100%;
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
            outline: none;
            transition: border-color 0.3s ease-in-out;
        }

            .card input[type="number"]:focus,
            .card input[type="text"]:focus,
            .card input[type="datetime"]:focus {
                border-color: #007bff;
            }
</style>


@code {
    public Sede[] Sedi;
    public string valNomeSede;
    public string valSedeIndirizz;


    public string upNomeSede;
    public string upSedeIndiriz;

    // poppup nice
    public bool HideLabel = true;
    public int Confirmation = 0;

    int Id_da_provare = 0;
    public bool flag_da_provare = true;

    public Sede NuovaSede = new Sede();
    public Sede AggiornaSede = new Sede();

    public async Task EditThis(int id)
    {
        Id_da_provare = id;
        flag_da_provare = false;
    }

 

    protected override async Task OnInitializedAsync()
    {
        Sedi = await Http.GetFromJsonAsync<Sede[]>("api/Sede");
    }


    public async Task Add()
    {
        NuovaSede.SedeName = valNomeSede;
        NuovaSede.Indirizzo = valSedeIndirizz;
        await AddSede(NuovaSede);
    }


    public async Task AddSede(Sede nuovasede)
    {
        var response = await Http.PostAsJsonAsync("api/Sede", nuovasede);

    }

    public async Task Delete(int id)
    {
        HideLabel = false;

        var response = await Http.DeleteAsync($"api/Sede/{id}");

        if (response.IsSuccessStatusCode)
        {
            // History item was successfully deleted, update the list
            Sedi = await Http.GetFromJsonAsync<Sede[]>("api/Sede");
        }
        else
        {
            Sedi = null;
            // Handle the case where deletion was not successful
            // You can show an error message or take appropriate action
        }


    }


    public async Task Edit()
    {
        AggiornaSede.Indirizzo = upSedeIndiriz;
        AggiornaSede.SedeName = upNomeSede;
        var response = await Http.PutAsJsonAsync($"api/Sede/{Id_da_provare}", AggiornaSede);
        if (response.IsSuccessStatusCode)
            Sedi = await Http.GetFromJsonAsync<Sede[]>("api/Sede");


    }



    public void DontDelete()
    {
        HideLabel = true;
        Confirmation = 2;
        return;
    }

    public void YesPlease()
    {
        Confirmation = 1;
        HideLabel = true;

        return;
    }

}
