@page "/Candidato"
@using MonusProject.Client.Shared.Models
@inject HttpClient Http


<h3>Candidato</h3>

@if (candy == null)
{
    <p><em>Loading...</em></p>
    
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome </th>
                <th>Cognome </th>
                <th> Skill</th>
      
            </tr>
        </thead>
        <tbody>
            @foreach (var cand in candy)
            {
                <tr>
                    <td>@cand.Nome</td>
                    <td>@cand.Cognome</td>
                    <td>@cand.SkillName</td>
                    <button class="btn-danger" @onclick="() => Delete(cand.CandidatoId)">delete </button>


                </tr>
                
            }
        </tbody>
    </table>
}
<div class="card">
    <form>
        <input type="text" @bind="value"  placeholder="Nome" required />
       <br />
        <input type="text" @bind="value1" placeholder="Cognome" required />
        <br />
        <input type="text" @bind="value2" placeholder="Skill" required />
        <br /> 
        <button class="btn-primary" @onclick="Add">  submit </button>
    </form>
</div>

<style>

    .card {
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 20px;
        width: 300px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        background-color: #f8f8f8;
        text-align: center;
    }

        .card input[type="number"],
        .card input[type="text"],
        .card input[type="datetime"] {
            width: 100%;
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
            outline: none;
            transition: border-color 0.3s ease-in-out;
        }

            .card input[type="number"]:focus,
            .card input[type="text"]:focus,
            .card input[type="datetime"]:focus {
                border-color: #007bff;
            }
</style>

@code {
    public Candidato[]? candy;

    public string value;
    public string value1;

    public string value2;

    public Candidato IlCandidato = new Candidato();


    protected override async Task OnInitializedAsync()
    {
        candy = await Http.GetFromJsonAsync<Candidato[]>("api/Candidato");
    }

    public  async Task Add()
    {
        IlCandidato.Nome = value;
        IlCandidato.Cognome = value1;
        IlCandidato.SkillName = value2;
        AddCandidato(IlCandidato);
        //candy = await Http.GetFromJsonAsync<Candidato[]>("api/Candidato");

        
        
    }
    public  async Task AddCandidato(Candidato newCandidato)
    {
            var response = await Http.PostAsJsonAsync("api/Candidato", newCandidato);

    }
    public async Task Delete(int id)
    {

        var response = await Http.DeleteAsync($"api/Candidato/{id}");

        if (response.IsSuccessStatusCode)
        {
            // History item was successfully deleted, update the list
            candy = await Http.GetFromJsonAsync<Candidato[]>("api/Candidato");
        }
        else
        {
            candy = null;
            // Handle the case where deletion was not successful
                // You can show an error message or take appropriate action
         }
        

    }

     
    

}



