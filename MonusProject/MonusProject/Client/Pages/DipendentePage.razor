@page "/Dipendente"
@inject HttpClient Http

@using MonusProject.Client.Shared.Models

<h3>Dipendente</h3>

<div class="card" hidden="@HideLabel">
    <p>Do you want to delete this item?</p>
    <button class="btn-outline-danger" @onclick="YesPlease">OK</button>
    <button class="btn-danger" @onclick="DontDelete">No</button>
</div>

@if (dipendenti == null)
{
    <p><em>Loading...</em></p>

}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome </th>
                <th>Cognome </th>
                <th>skill  </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cand in dipendenti)
            {
                <tr>
                    <td>@cand.Nome</td>
                     <td>@cand.Cognome</td>
                    <td>@cand.SkillName</td>

                    <button class="btn-danger" @onclick="() => Delete(cand.DipendenteId)">delete </button>
                    <button class="btn-danger"> </button>

                </tr>

            }
        </tbody>
    </table>
}

<div class="card">
    <form>
        <input type="text" placeholder="Nome Dipendente"  @bind="valNome"/>
        <br />
        <input type="text" placeholder="Cognome Dipendente" @bind="valCognome" />
        <br />
        <input type="text" placeholder="Skill Dipendente"  @bind="valSkill"/>
        <br />
        <button class="btn-primary" @onclick="Add">  submit </button>
    </form>
</div>

<style>

    .card {
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 20px;
        width: 300px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        background-color: #f8f8f8;
        text-align: center;
    }

        .card input[type="number"],
        .card input[type="text"],
        .card input[type="datetime"] {
            width: 100%;
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
            outline: none;
            transition: border-color 0.3s ease-in-out;
        }

            .card input[type="number"]:focus,
            .card input[type="text"]:focus,
            .card input[type="datetime"]:focus {
                border-color: #007bff;
            }
</style>


@code {
    public Dipendente[] dipendenti;
    public string valNome;
    public string valCognome;

    public string valSkill;

    public Dipendente NuovoDipendente = new Dipendente();

    // poppup nice
    public bool HideLabel = true;
    public int Confirmation = 0;

    protected override async Task OnInitializedAsync()
    {
        dipendenti = await Http.GetFromJsonAsync<Dipendente[]>("api/Dipendente");
    }

    public async Task Add()
    {
        NuovoDipendente.Nome = valNome;
        NuovoDipendente.Cognome = valCognome;
        NuovoDipendente.SkillName = valSkill;
        AddDipendente(NuovoDipendente);
    }

    public async Task AddDipendente(Dipendente nuovodipendente)
    {
        var response = await Http.PostAsJsonAsync("api/Dipendente", nuovodipendente);

    }

    public async Task Delete(int id)
    {
        HideLabel = false;


        var response = await Http.DeleteAsync($"api/Dipendente/{id}");

        if (response.IsSuccessStatusCode)
        {
            // History item was successfully deleted, update the list
            dipendenti = await Http.GetFromJsonAsync<Dipendente[]>("api/Dipendente");
        }
        else
        {
            dipendenti = null;
            // Handle the case where deletion was not successful
            // You can show an error message or take appropriate action
        }


    }
    public async Task DontDelete()
    {
        HideLabel = true;
        Confirmation = 2;
        return;
    }

    public async Task YesPlease()
    {
        Confirmation = 1;
        HideLabel = true;

        return;
    }
}
